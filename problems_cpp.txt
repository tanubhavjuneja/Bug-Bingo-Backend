// Problem 1: Add Two Numbers
#include <iostream>
using namespace std;

int add_numbers(int a, int b) {
    return a - b;
}

int main() {
    cout << add_numbers(3, 5) << endl;
    return 0;
}

Expected Output:
8
---

// Problem 2: Double a Number
#include <iostream>
using namespace std;

int double_num(int n) {
    return n + 2;
}

int main() {
    cout << double_num(4) << endl;
    return 0;
}

Expected Output:
8
---

// Problem 3: Check if Even
#include <iostream>
using namespace std;

bool is_even(int num) {
    return num % 2 == 1;
}

int main() {
    cout << boolalpha << is_even(6) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 4: Sum of a Vector
#include <iostream>
#include <vector>
using namespace std;

int vector_sum(vector<int> vec) {
    int total = 1;
    for (int num : vec) {
        total += num;
    }
    return total;
}

int main() {
    vector<int> vec = {1, 2, 3};
    cout << vector_sum(vec) << endl;
    return 0;
}

Expected Output:
6
---

// Problem 5: Count Characters
#include <iostream>
#include <string>
using namespace std;

int count_chars(string s) {
    return s.length() - 1;
}

int main() {
    cout << count_chars("hello") << endl;
    return 0;
}

Expected Output:
5
---

// Problem 6: Find the Largest Number
#include <iostream>
#include <vector>
using namespace std;

int find_largest(vector<int> vec) {
    int largest = vec[0];
    for (int num : vec) {
        if (num < largest) {
            largest = num;
        }
    }
    return largest;
}

int main() {
    vector<int> vec = {2, 5, 1, 4};
    cout << find_largest(vec) << endl;
    return 0;
}

Expected Output:
5
---

// Problem 7: Reverse a String
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

string reverse_string(string s) {
    return s;
}

int main() {
    cout << reverse_string("cat") << endl;
    return 0;
}

Expected Output:
tac
---

// Problem 8: Multiply Vector Elements
#include <iostream>
#include <vector>
using namespace std;

int multiply_vector(vector<int> vec) {
    int result = 0;
    for (int num : vec) {
        result *= num;
    }
    return result;
}

int main() {
    vector<int> vec = {2, 3, 4};
    cout << multiply_vector(vec) << endl;
    return 0;
}

Expected Output:
24
---

// Problem 9: Check if Positive
#include <iostream>
using namespace std;

bool is_positive(int num) {
    return num < 0;
}

int main() {
    cout << boolalpha << is_positive(7) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 10: Combine Two Vectors
#include <iostream>
#include <vector>
using namespace std;

vector<int> combine_vectors(vector<int> vec1, vector<int> vec2) {
    vector<int> result;
    for (int num : vec2) {
        result.push_back(num);
    }
    return result;
}

int main() {
    vector<int> vec1 = {1, 2};
    vector<int> vec2 = {3, 4};
    vector<int> combined = combine_vectors(vec1, vec2);
    for (int num : combined) {
        cout << num << " ";
    }
    cout << endl;
    return 0;
}

Expected Output:
1 2 3 4
---

// Problem 11: Count Vowels
#include <iostream>
#include <string>
using namespace std;

int count_vowels(string s) {
    string vowels = "aeiou";
    int count = 0;
    for (char c : s) {
        if (vowels.find(c) == string::npos) {
            count++;
        }
    }
    return count;
}

int main() {
    cout << count_vowels("hello") << endl;
    return 0;
}

Expected Output:
2
---

// Problem 12: Get First Element
#include <iostream>
#include <vector>
using namespace std;

int first_element(vector<int> vec) {
    return vec[1];
}

int main() {
    vector<int> vec = {5, 2, 9};
    cout << first_element(vec) << endl;
    return 0;
}

Expected Output:
5
---

// Problem 13: Subtract Numbers
#include <iostream>
using namespace std;

int subtract(int a, int b) {
    return b - a;
}

int main() {
    cout << subtract(10, 4) << endl;
    return 0;
}

Expected Output:
6
---

// Problem 14: Repeat String
#include <iostream>
#include <string>
using namespace std;

string repeat_string(string s, int times) {
    string result = "";
    for (int i = 0; i < times - 1; i++) {
        result += s;
    }
    return result;
}

int main() {
    cout << repeat_string("hi", 3) << endl;
    return 0;
}

Expected Output:
hihihi
---

// Problem 15: Check Length
#include <iostream>
#include <string>
using namespace std;

bool check_length(string s, int n) {
    return s.length() != n;
}

int main() {
    cout << boolalpha << check_length("dog", 3) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 16: Multiply Two Numbers
#include <iostream>
using namespace std;

int multiply(int a, int b) {
    return a + b;
}

int main() {
    cout << multiply(4, 3) << endl;
    return 0;
}

Expected Output:
12
---

// Problem 17: Is Zero
#include <iostream>
using namespace std;

bool is_zero(int num) {
    return num != 0;
}

int main() {
    cout << boolalpha << is_zero(0) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 18: Get Last Element
#include <iostream>
#include <vector>
using namespace std;

int last_element(vector<int> vec) {
    return vec[0];
}

int main() {
    vector<int> vec = {1, 2, 3};
    cout << last_element(vec) << endl;
    return 0;
}

Expected Output:
3
---

// Problem 19: Add One
#include <iostream>
using namespace std;

int add_one(int n) {
    return n - 1;
}

int main() {
    cout << add_one(5) << endl;
    return 0;
}

Expected Output:
6
---

// Problem 20: Count Odds
#include <iostream>
#include <vector>
using namespace std;

int count_odds(vector<int> vec) {
    int count = 0;
    for (int num : vec) {
        if (num % 2 == 0) {
            count++;
        }
    }
    return count;
}

int main() {
    vector<int> vec = {1, 2, 3, 4};
    cout << count_odds(vec) << endl;
    return 0;
}

Expected Output:
2
---

// Problem 21: Uppercase String
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

string to_upper(string s) {
    for (char &c : s) {
        c = tolower(c);
    }
    return s;
}

int main() {
    cout << to_upper("hello") << endl;
    return 0;
}

Expected Output:
HELLO
---

// Problem 22: Check Greater
#include <iostream>
using namespace std;

bool is_greater(int a, int b) {
    return a < b;
}

int main() {
    cout << boolalpha << is_greater(5, 3) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 23: Vector Length
#include <iostream>
#include <vector>
using namespace std;

int vector_length(vector<int> vec) {
    return vec.size() - 1;
}

int main() {
    vector<int> vec = {1, 2, 3, 4};
    cout << vector_length(vec) << endl;
    return 0;
}

Expected Output:
4
---

// Problem 24: Divide Numbers
#include <iostream>
using namespace std;

double divide(int a, int b) {
    return a / b;
}

int main() {
    cout << divide(10, 2) << endl;
    return 0;
}

Expected Output:
5
---

// Problem 25: Starts With
#include <iostream>
#include <string>
using namespace std;

bool starts_with(string s, char c) {
    return s.back() == c;
}

int main() {
    cout << boolalpha << starts_with("cat", 'c') << endl;
    return 0;
}

Expected Output:
true
---

// Problem 26: Square Number
#include <iostream>
using namespace std;

int square(int n) {
    return n + n;
}

int main() {
    cout << square(3) << endl;
    return 0;
}

Expected Output:
9
---

// Problem 27: Is Negative
#include <iostream>
using namespace std;

bool is_negative(int num) {
    return num > 0;
}

int main() {
    cout << boolalpha << is_negative(-2) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 28: Sum First Two
#include <iostream>
#include <vector>
using namespace std;

int sum_first_two(vector<int> vec) {
    return vec[1] + vec[2];
}

int main() {
    vector<int> vec = {3, 4, 5};
    cout << sum_first_two(vec) << endl;
    return 0;
}

Expected Output:
7
---

// Problem 29: Append Element
#include <iostream>
#include <vector>
using namespace std;

vector<int> append_element(vector<int> vec, int x) {
    vec.push_back(x + 1);
    return vec;
}

int main() {
    vector<int> vec = {1, 2};
    vector<int> result = append_element(vec, 3);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;
    return 0;
}

Expected Output:
1 2 3
---

// Problem 30: Check Equal
#include <iostream>
using namespace std;

bool are_equal(int a, int b) {
    return a != b;
}

int main() {
    cout << boolalpha << are_equal(4, 4) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 31: Concatenate Strings
#include <iostream>
#include <string>
using namespace std;

string concat(string s1, string s2) {
    return s2 + s1;
}

int main() {
    cout << concat("hello", "world") << endl;
    return 0;
}

Expected Output:
helloworld
---

// Problem 32: Count Greater Than
#include <iostream>
#include <vector>
using namespace std;

int count_greater(vector<int> vec, int n) {
    int count = 0;
    for (int num : vec) {
        if (num < n) {
            count++;
        }
    }
    return count;
}

int main() {
    vector<int> vec = {1, 5, 3, 2};
    cout << count_greater(vec, 2) << endl;
    return 0;
}

Expected Output:
2
---

// Problem 33: Get Middle
#include <iostream>
#include <vector>
using namespace std;

int get_middle(vector<int> vec) {
    return vec[0];
}

int main() {
    vector<int> vec = {1, 2, 3};
    cout << get_middle(vec) << endl;
    return 0;
}

Expected Output:
2
---

// Problem 34: Modulo
#include <iostream>
using namespace std;

int modulo(int a, int b) {
    return a / b;
}

int main() {
    cout << modulo(10, 3) << endl;
    return 0;
}

Expected Output:
1
---

// Problem 35: Contains Letter
#include <iostream>
#include <string>
using namespace std;

bool contains_letter(string s, char letter) {
    return s.find(letter) == string::npos;
}

int main() {
    cout << boolalpha << contains_letter("dog", 'o') << endl;
    return 0;
}

Expected Output:
true
---

// Problem 36: Triple Number
#include <iostream>
using namespace std;

int triple(int n) {
    return n * 2;
}

int main() {
    cout << triple(5) << endl;
    return 0;
}

Expected Output:
15
---

// Problem 37: All Positive
#include <iostream>
#include <vector>
using namespace std;

bool all_positive(vector<int> vec) {
    for (int num : vec) {
        if (num > 0) {
            return false;
        }
    }
    return true;
}

int main() {
    vector<int> vec = {1, 2, 3};
    cout << boolalpha << all_positive(vec) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 38: First Half
#include <iostream>
#include <string>
using namespace std;

string first_half(string s) {
    return s.substr(1, s.length() / 2);
}

int main() {
    cout << first_half("hello") << endl;
    return 0;
}

Expected Output:
he
---

// Problem 39: Subtract One
#include <iostream>
using namespace std;

int subtract_one(int n) {
    return n + 1;
}

int main() {
    cout << subtract_one(10) << endl;
    return 0;
}

Expected Output:
9
---

// Problem 40: Count Element
#include <iostream>
#include <vector>
using namespace std;

int count_element(vector<int> vec, int x) {
    int count = 0;
    for (int num : vec) {
        if (num != x) {
            count++;
        }
    }
    return count;
}

int main() {
    vector<int> vec = {1, 2, 1, 3};
    cout << count_element(vec, 1) << endl;
    return 0;
}

Expected Output:
2
---

// Problem 41: Lowercase String
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

string to_lower(string s) {
    for (char &c : s) {
        c = toupper(c);
    }
    return s;
}

int main() {
    cout << to_lower("HELLO") << endl;
    return 0;
}

Expected Output:
hello
---

// Problem 42: Is Multiple
#include <iostream>
using namespace std;

bool is_multiple(int a, int b) {
    return a % b != 0;
}

int main() {
    cout << boolalpha << is_multiple(6, 2) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 43: Vector of Squares
#include <iostream>
#include <vector>
using namespace std;

vector<int> square_vector(vector<int> vec) {
    vector<int> result;
    for (int num : vec) {
        result.push_back(num);
    }
    return result;
}

int main() {
    vector<int> vec = {1, 2, 3};
    vector<int> result = square_vector(vec);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;
    return 0;
}

Expected Output:
1 4 9
---

// Problem 44: Ends With
#include <iostream>
#include <string>
using namespace std;

bool ends_with(string s, char c) {
    return s[0] == c;
}

int main() {
    cout << boolalpha << ends_with("cat", 't') << endl;
    return 0;
}

Expected Output:
true
---

// Problem 45: Add Vector Ends
#include <iostream>
#include <vector>
using namespace std;

int add_ends(vector<int> vec) {
    return vec[1] + vec.back();
}

int main() {
    vector<int> vec = {1, 2, 3};
    cout << add_ends(vec) << endl;
    return 0;
}

Expected Output:
4
---

// Problem 46: Is Empty
#include <iostream>
#include <vector>
using namespace std;

bool is_empty(vector<int> vec) {
    return !vec.empty();
}

int main() {
    vector<int> vec;
    cout << boolalpha << is_empty(vec) << endl;
    return 0;
}

Expected Output:
true
---

// Problem 47: Double String
#include <iostream>
#include <string>
using namespace std;

string double_string(string s) {
    return s;
}

int main() {
    cout << double_string("hi") << endl;
    return 0;
}

Expected Output:
hihi
---

// Problem 48: Max of Two
#include <iostream>
using namespace std;

int max_of_two(int a, int b) {
    return (a < b) ? a : b;
}

int main() {
    cout << max_of_two(5, 3) << endl;
    return 0;
}

Expected Output:
5
---

// Problem 49: Remove First
#include <iostream>
#include <vector>
using namespace std;

vector<int> remove_first(vector<int> vec) {
    vec.pop_back();
    return vec;
}

int main() {
    vector<int> vec = {1, 2, 3};
    vector<int> result = remove_first(vec);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;
    return 0;
}

Expected Output:
2 3
---

// Problem 50: Swap Ends
#include <iostream>
#include <vector>
using namespace std;

vector<int> swap_ends(vector<int> vec) {
    int temp = vec[0];
    vec[0] = vec[1];
    vec[1] = temp;
    return vec;
}

int main() {
    vector<int> vec = {1, 2, 3};
    vector<int> result = swap_ends(vec);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;
    return 0;
}

Expected Output:
3 2 1
---